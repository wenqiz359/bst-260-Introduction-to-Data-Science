---
title: Problem set 2 
date: 2024-09-13
---

For these exercises, do not load any packages other than **dslabs**.

Make sure to use vectorization whenever possible.

1.  What is the sum of the first 100 positive integers? Use the functions `seq` and `sum` to compute the sum with R for any `n`.

```{r}
n <- 100
sum(seq(1, n))
```

2.  Load the US murders dataset from the **dslabs** package. Use the function `str` to examine the structure of the `murders` object. What are the column names used by the data frame for these five variables? Show the subset of `murders` showing states with less than 1 per 100,000 deaths. Show all variables.

```{r}
library(dslabs)
str(murders)
```
```{r}
murders[murders$state%in% murders$state[with(murders, total/population <1/100000)],]
```

```{r}
murders$murder_rate <- with(murders, total/population)*100000 
subset <- murders[murders$murder_rate< 1,]
subset
```

3.  Show the subset of `murders` showing states with less than 1 per 100,000 deaths and in the West of the US. Don't show the `region` variable.

```{r}
west_subset <- murders[murders$murder_rate < 1 & murders$region == 'West',colnames(subset) != "region"  ]
west_subset
```

4.  Show the largest state with a rate less than 1 per 100,000.

```{r}
res <- murders[murders$murder_rate <1,]
res$state[which.max(res$population)]
```

5.  Show the state with a population of more than 10 million with the lowest rate.

```{r}
ml_state <- murders[murders$population > 10^7,]
ml_state$state[which.min(ml_state$murder_rate)]
```

6.  Compute the rate for each region of the US.

```{r}
inds <- split(1:nrow(murders),murders$region)
sapply(inds,function(inds) {
  sum(murders$total[inds])/sum(murders$population[inds])})*10^5
```

7.  Create a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use `seq` and `length`.

```{r}
length(seq(6,55, by = 4/7))
```

8.  Make this data frame:

```{r}
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", 
          "San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
```

Convert the temperatures to Celsius.

```{r}
city_temps$temperature_celsius <- (city_temps$temperature - 32) * 5 / 9
city_temps
```

9.  Write a function `euler` that compute the following sum for any $n$:

$$
S_n = 1+1/2^2 + 1/3^2 + \dots 1/n^2
$$

```{r}
euler <- function(n){
  s_n <- sum(1/(1:n)^2)
  return(s_n)
}
```

10. Show that as $n$ gets bigger we get closer $\pi^2/6$ by plotting $S_n$ versus $n$ with a horizontal dashed line at $\pi^2/6$.

```{r}
n_values = seq(1:100)
s_values=sapply(n_values,euler)
plot(n_values,s_values,type='l',xlab='n',ylab='S_n')
abline(h=pi^2/6,lty=2,col='blue')
```

11. Use the `%in%` operator and the predefined object `state.abb` to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?

```{r}
check_abb <- c('MA', 'ME','MI', 'MO', 'MU')
check_abb[which(check_abb %in% state.abb)]
print(check_abb %in% state.abb)
```

12. Extend the code you used in the previous exercise to report the one entry that is **not** an actual abbreviation. Hint: use the `!` operator, which turns `FALSE` into `TRUE` and vice versa, then `which` to obtain an index.

```{r}
check_abb[which(!(check_abb %in% state.abb))]
print(!(check_abb %in% state.abb))
```

13. In the `murders` dataset, use `match` to show all variables for New York, California, and Texas, in that order.

```{r}
murders[match(c('New York','California','Texas'),murders$state),]
```
or

```{r}
subset_nct <- murders[murders$state %in% c('New York','California','Texas'),]
subset_nct[match(c('New York','California','Texas'),subset_nct$state),]
```

14. Write a function called `vandermonde_helper` that for any $x$ and $n$, returns the vector $(1, x, x^2, x^3, \dots, x^n)$. Show the results for $x=3$ and $n=5$.


```{r}
vandermonde_helper <- function(x,n ){
  s = x^(0:n)
  return (s)
}

vandermonde_helper(3,5)
```


```{r}
vandermonde_helper <- function(x,n){
  s = vector()
  for (i in 0:n){
    s=append(s,x^i)
  }
  return(s)
}
vandermonde_helper(3,5)
```


15. Create a vector using:

```{r}
n <- 10000
p <- 0.5
set.seed(2024-9-6)
x <- sample(c(0,1), n, prob = c(1 - p, p), replace = TRUE)
```


Compute the length of each stretch of 1s and then plot the distribution of these values. Check to see if the distribution follows a geometric distribution as the theory predicts. Do not use a loop!

```{r}
d <- diff(c(0,x,0))
st <- which(d == 1)
en <- which(d == -1)
l <- en - st
hist(l)
tb <- table(l) / length(l)
k <- as.numeric(names(tb))
plot(k,tb,type='h')
lines(k, p^k)
```
The distribution follows a geometric distribution as the theory predicts




